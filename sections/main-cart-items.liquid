<style>
  .cart-page-container {
    max-width: 1200px;
    margin: 40px auto;
    font-family: sans-serif;
    color: #2c2d2c;
  }

  .cart-header {
    text-align: center;
    font-size: 2em;
    font-weight: 300;
    margin-bottom: 40px;
  }

  .cart-table {
    width: 100%;
    border-collapse: collapse;
  }

  .cart-table th {
    font-weight: 500;
    text-align: left;
    padding-bottom: 10px;
    font-size: 0.9em;
    text-transform: uppercase;
    color: #6a6a6a;
  }

  .cart-table .product-col {
    width: 60%;
  }

  .cart-table .quantity-col {
    width: 5%;
  }

  .cart-table .total-col {
    width: 10%;
    text-align: right;
  }

  .cart-item-row {
    border-top: 1px solid #e0e0e0;
  }

  .cart-item-row td {
    padding: 20px 0;
    vertical-align: middle;
  }

  .cart-item-details {
    display: flex;
    align-items: center;
    gap: 20px;
  }

  .cart-item-image {
    width: 80px;
    height: 80px;
    object-fit: cover;
  }

  .product-info {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  .product-info h3 a {
    margin: 0;
    color: #000;
    text-decoration: none;
    font-family: 'Josefin Sans';
    font-size: 18px;
    font-style: normal;
    font-weight: 400;
    line-height: normal;
    width: 66%;
    display: flex;
  }

  .product-info .vendor-name {
    font-size: 0.8em;
    color: #6a6a6a;
  }

  .quantity-controls {
    display: flex;
    align-items: center;
    border: 1px solid #e0e0e0;
    width: 100%;
    height: 40px;
    justify-content: center;
  }

  .quantity-controls button {
    background: transparent;
    border: none;
    width: 24px;
    height: 100%;
    cursor: pointer;
    font-size: 1em;
    line-height: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #2c2d2c;
    transition: background-color 0.2s ease;
  }

  .quantity-controls button:hover {
    background: #f0f0f0;
  }

  .quantity-controls input {
    width: 30px;
    text-align: center;
    border: none;
    height: 100%;
    -moz-appearance: textfield;
  }

  .quantity-controls input::-webkit-outer-spin-button,
  .quantity-controls input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .remove-link {
    text-decoration: underline;
    font-size: 0.8em;
    color: #6a6a6a;
    cursor: pointer;
    display: block;
    margin-top: 5px;
    text-align: center;
  }

  .cart-totals-section {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    padding-top: 75px;
    border-top: 1px solid #e0e0e0;
    gap: 40px;
  }

  .order-note-container {
    flex-grow: 1;
  }

  .order-note-container label {
    display: block;
    color: #2c2d2c;
    font-family: 'Josefin Sans';
    font-size: 22px;
    font-style: normal;
    font-weight: 400;
    line-height: normal;
    margin-bottom: 10px;
  }

  .order-note-container textarea {
    width: 100%;
    height: 100px;
    border: 1px solid #e0e0e0;
    padding: 10px;
    resize: none;
  }

  .checkout-section {
    width: 50%;
    text-align: right;
    display: flex;
    flex-direction: column;
    align-items: end;
  }

  .cart-total-info {
    font-size: 1.5em;
    font-weight: bold;
  }

  .cart-total-info span {
    font-weight: normal;
  }

  .cart-subtext {
    font-size: 0.8em;
    color: #6a6a6a;
    margin-bottom: 5px;
  }

  .checkout-button {
    background: #2c2d2c;
    color: white;
    padding: 15px 30px;
    text-transform: uppercase;
    border: none;
    cursor: pointer;
    font-size: 1em;
    font-weight: bold;
    letter-spacing: 1px;
    transition: background-color 0.2s ease;
  }

  .checkout-button:hover {
    background: #444544;
  }

  @media (max-width: 768px) {
    .cart-header {
      font-size: 1.5em;
    }

    .order-note-container {
      width: 100%;
    }

    .cart-table {
      border-top: none;
    }

    .cart-table thead {
      display: none;
    }

    .cart-item-row {
      display: block;
      margin-bottom: 20px;
    }

    .cart-item-row td {
      display: block;
      padding: 10px 0;
    }

    .cart-item-details {
      flex-direction: row;
      align-items: center;
      gap: 15px;
    }

    .product-info h3 a {
      width: 100%;
      font-size: 16px;
    }

    .product-col {
      width: 100%;
    }

    .quantity-col {
      width: 100%;
      text-align: left;
      padding: 0;
    }

    .quantity-controls {
      width: 120px;
      height: 35px;
    }

    .quantity-controls input {
      width: 40px;
    }

    .remove-link {
      text-align: left;
      margin-top: 10px;
    }

    .total-col {
      width: 100%;
      text-align: left;
      font-size: 1.2em;
      font-weight: bold;
      padding-top: 0;
    }

    .cart-totals-section {
      flex-direction: column;
      gap: 20px;
      padding-top: 10px;
    }

    .checkout-section {
      width: 100%;
      align-items: center;
    }

    .cart-total-info {
      font-size: 1.2em;
    }

    .cart-subtext {
      text-align: center;
    }

    .checkout-button {
      width: 100%;
    }

    .cart-page-container {
      padding: 0 25px;
    }
    .cart-table .product-col {
      width: 100%;
    }
  }
</style>

<div class="cart-page-container">
  <h1 class="cart-header">CART</h1>

  <form action="{{ routes.cart_url }}" method="post" novalidate id="cart-form">
    <table class="cart-table">
      <thead>
        <tr>
          <th class="product-col">PRODUCT</th>
          <th class="quantity-col">QUANTITY</th>
          <th class="total-col">TOTAL</th>
        </tr>
      </thead>
      <tbody>
        {% for item in cart.items %}
          <tr class="cart-item-row" data-line="{{ forloop.index }}">
            <td class="product-col">
              <div class="cart-item-details">
                <img
                  src="{{ item.image | image_url: width: 80 }}"
                  alt="{{ item.image.alt | escape }}"
                  class="cart-item-image"
                >
                <div class="product-info">
                  <h3>
                    <a href="{{ item.url }}">{{ item.product.title }}</a>
                  </h3>
                  <div class="price-vendor">
                    <span>{{ item.price | money }}</span>
                    {% if item.vendor %}
                      <span class="vendor-name">{{ item.vendor }}</span>
                    {% endif %}
                  </div>
                </div>
              </div>
            </td>
            <td class="quantity-col">
              <div class="quantity-controls">
                <button type="button" class="quantity-minus">-</button>
                <input
                  type="number"
                  name="updates[]"
                  value="{{ item.quantity }}"
                  min="0"
                  class="quantity-input"
                  data-line-id="{{ forloop.index }}"
                >
                <button type="button" class="quantity-plus">+</button>
              </div>
              <a href="{{ item.url_to_remove }}" class="remove-link">Remove</a>
            </td>
            <td class="total-col" data-line-price-id="{{ forloop.index }}">{{ item.final_line_price | money }}</td>
          </tr>
        {% else %}
          <tr class="cart-item-row">
            <td colspan="3" style="text-align: center;">Your cart is empty.</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </form>

  <div class="cart-totals-section">
    <div class="order-note-container">
      <label for="OrderNote">Add order note</label>
      <textarea id="OrderNote" name="note" form="cart-form">{{ cart.note }}</textarea>
    </div>

    <div class="checkout-section">
      <div class="cart-total-info">
        TOTAL: <span class="cart-total-price">{{ cart.total_price | money }}</span>
      </div>
      <p class="cart-subtext">Tax included. Shipping calculated at checkout.</p>
      <button class="checkout-button buttonPrimary" form="cart-form" name="checkout">CHECKOUT</button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const quantityInputs = document.querySelectorAll('.quantity-input');
    const cartTotalPriceElement = document.querySelector('.cart-total-price');

    const formatMoney = (cents) => {
      if (typeof Shopify !== 'undefined' && typeof Shopify.formatMoney !== 'undefined') {
        return Shopify.formatMoney(cents, '{{ shop.money_format }}');
      }
      const formattedCents = (cents / 100).toFixed(2);
      return `${formattedCents} {{ shop.money_format | split: '{{' | first }}`.trim();
    };

    function updateCart(line, quantity) {
      const formData = {
        updates: {},
      };
      formData.updates[line] = quantity;

      fetch('/cart/update.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
        },
        body: JSON.stringify(formData),
      })
        .then((response) => response.json())
        .then((cart) => {
          const updatedItem = cart.items.find((item) => item.line === line);
          if (updatedItem) {
            const linePriceElement = document.querySelector(`[data-line-price-id="${line}"]`);
            if (linePriceElement) {
              linePriceElement.textContent = formatMoney(updatedItem.final_line_price);
            }
          }

          if (cartTotalPriceElement) {
            cartTotalPriceElement.textContent = formatMoney(cart.total_price);
          }
        })
        .catch((error) => {
          console.error('Error updating cart:', error);
        });
    }

    quantityInputs.forEach((input) => {
      input.addEventListener('change', () => {
        const lineId = parseInt(input.dataset.lineId);
        const quantity = parseInt(input.value);
        updateCart(lineId, quantity);
      });
    });

    document.querySelectorAll('.quantity-controls button').forEach((button) => {
      button.addEventListener('click', (event) => {
        event.preventDefault();
        const input = event.target.closest('.quantity-controls').querySelector('.quantity-input');
        let currentValue = parseInt(input.value);

        if (event.target.classList.contains('quantity-plus')) {
          input.value = currentValue + 1;
        } else if (event.target.classList.contains('quantity-minus') && currentValue > 0) {
          input.value = currentValue - 1;
        }

        const lineId = parseInt(input.dataset.lineId);
        const quantity = parseInt(input.value);
        updateCart(lineId, quantity);
      });
    });
  });
</script>
